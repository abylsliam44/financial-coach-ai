import React, { useState, useEffect } from 'react';
import { useOnboarding } from '../../context/OnboardingContext';

export const Step4Goals: React.FC = () => {
  const { state, dispatch } = useOnboarding();
  const [goals, setGoals] = useState<string[]>(state.goals);
  const [customGoal, setCustomGoal] = useState('');

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    dispatch({
      type: 'UPDATE_STEP_4',
      payload: { goals },
    });
  }, [goals, dispatch]);

  const goalOptions = [
    { id: 'vacation', label: '–û—Ç–ø—É—Å–∫', icon: 'üèñÔ∏è', description: '–ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ' },
    { id: 'emergency', label: '–ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', icon: 'üõ°Ô∏è', description: '–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥' },
    { id: 'debt', label: '–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤', icon: 'üí≥', description: '–ó–∞–∫—Ä—ã—Ç—å –∫—Ä–µ–¥–∏—Ç—ã' },
    { id: 'car', label: '–ú–∞—à–∏–Ω–∞', icon: 'üöô', description: '–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è' },
    { id: 'habits', label: '–£–ª—É—á—à–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏', icon: 'üìà', description: '–ö–æ–Ω—Ç—Ä–æ–ª—å —Ç—Ä–∞—Ç' },
    { id: 'investment', label: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', icon: 'üìä', description: '–í–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏' },
    { id: 'education', label: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: 'üéì', description: '–ö—É—Ä—Å—ã –∏ –æ–±—É—á–µ–Ω–∏–µ' },
    { id: 'home', label: '–ü–æ–∫—É–ø–∫–∞ –∂–∏–ª—å—è', icon: 'üè°', description: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –∏–ª–∏ –¥–æ–º' },
  ];

  const toggleGoal = (goalId: string) => {
    setGoals(prev => 
      prev.includes(goalId)
        ? prev.filter(id => id !== goalId)
        : [...prev, goalId]
    );
  };

  const addCustomGoal = () => {
    if (customGoal.trim() && !goals.includes(customGoal.trim())) {
      setGoals(prev => [...prev, customGoal.trim()]);
      setCustomGoal('');
    }
  };

  const removeGoal = (goalId: string) => {
    setGoals(prev => prev.filter(id => id !== goalId));
  };

  return (
    <div className="space-y-6">
      {/* –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        </label>
        <div className="grid grid-cols-2 gap-3 mb-4">
          {goalOptions.map((goal) => (
            <button
              key={goal.id}
              type="button"
              onClick={() => toggleGoal(goal.id)}
              className={`p-4 border rounded-xl text-left transition-all ${
                goals.includes(goal.id)
                  ? 'border-emerald-500 bg-emerald-50 text-emerald-700'
                  : 'border-gray-300 hover:border-gray-400 text-gray-700'
              }`}
            >
              <div className="flex items-center space-x-3 mb-2">
                <span className="text-xl">{goal.icon}</span>
                <span className="font-medium">{goal.label}</span>
              </div>
              <div className="text-sm text-gray-600">{goal.description}</div>
            </button>
          ))}
        </div>

        {/* –°–≤–æ—è —Ü–µ–ª—å */}
        <div className="border-t pt-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ü–µ–ª—å
          </label>
          <div className="flex space-x-2">
            <input
              type="text"
              value={customGoal}
              onChange={(e) => setCustomGoal(e.target.value)}
              className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å"
              onKeyPress={(e) => e.key === 'Enter' && addCustomGoal()}
            />
            <button
              onClick={addCustomGoal}
              disabled={!customGoal.trim()}
              className="px-6 py-3 bg-emerald-500 text-white rounded-xl font-medium hover:bg-emerald-600 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>

        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ */}
        {goals.length > 0 && (
          <div className="mt-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏:</h4>
            <div className="flex flex-wrap gap-2">
              {goals.map((goalId) => {
                const goal = goalOptions.find(g => g.id === goalId);
                return (
                  <div
                    key={goalId}
                    className="flex items-center space-x-2 bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm"
                  >
                    <span>{goal?.icon || 'üéØ'}</span>
                    <span>{goal?.label || goalId}</span>
                    <button
                      onClick={() => removeGoal(goalId)}
                      className="text-emerald-600 hover:text-emerald-800"
                    >
                      √ó
                    </button>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}; 